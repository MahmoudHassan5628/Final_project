# -*- coding: utf-8 -*-
"""modeling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BwiFAHVF1uzHNuxTZSd7DjtQJknZi4aj
"""

!pip install fastapi streamlit

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
from scipy.stats import shapiro
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from fastapi import FastAPI
import streamlit as st
import joblib

# Function to load the dataset
def load_dataset(file_path):
    print('---------------------------------------------------------------------')
    df = pd.read_csv(file_path)
    print(df.head())
    return df

# Function to display dataset information
def display_dataset_info(df):
    print("Dataset Info:")
    print(df.info())
    print('---------------------------------------------------------------------')

# Function to display dataset summary statistics
def display_summary_statistics(df):
    print("Summary Statistics:")
    print(df.describe())
    print('---------------------------------------------------------------------')

# Function to display unique values count in each column
def display_unique_values_count(df):
    print("Unique Values Count:")
    print(df.nunique())
    print('---------------------------------------------------------------------')

# Function to perform exploratory data analysis and visualizations  #EDA
def exploratory_data_analysis(df):
    plt.figure(figsize=(10, 30))
    for i, col in enumerate(df.columns[1:-1], 1):
        plt.subplot(8, 1, i)
        sns.histplot(x=df[col], hue=df["fuelType"], multiple="dodge")
        plt.title(f"Distribution of {col} Data")
        plt.xticks(rotation=90)
        plt.tight_layout()
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["price"], hue = df[df["fuelType"] == "Petrol"]["fuelType"])
    plt.title("Mileage vs Price for Petrol Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["price"], hue = df[df["fuelType"] == "Diesel"]["fuelType"])
    plt.title("Mileage vs Price for Diesel Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["transmission"], hue = df[df["fuelType"] == "Petrol"]["fuelType"])
    plt.title("Mileage vs Transmission for Petrol Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["transmission"], hue = df[df["fuelType"] == "Diesel"]["fuelType"])
    plt.title("Mileage vs Transmission for Diesel Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["tax"], hue = df[df["fuelType"] == "Petrol"]["fuelType"])
    plt.title("Mileage vs Tax for Petrol Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["tax"], hue = df[df["fuelType"] == "Diesel"]["fuelType"])
    plt.title("Mileage vs Tax for Diesel Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["engineSize"], hue = df[df["fuelType"] == "Petrol"]["fuelType"])
    plt.title("Mileage vs Engine Size for Petrol Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["engineSize"], hue = df[df["fuelType"] == "Diesel"]["fuelType"])
    plt.title("Mileage vs Engine Size for Diesel Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["Manufacturer"], hue = df[df["fuelType"] == "Petrol"]["fuelType"])
    plt.title("Mileage vs Manufacturer for Petrol Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

    sns.scatterplot(x = df["mileage"], y = df["Manufacturer"], hue = df[df["fuelType"] == "Diesel"]["fuelType"])
    plt.title("Mileage vs Manufacturer for Diesel Vehicles")
    plt.show()
    print('---------------------------------------------------------------------')

def visualize_categorical_features(df):
    # Use LabelEncoder on object type of some features
    cat_cols = ["model", "transmission", "fuelType", "Manufacturer"]
    le = LabelEncoder()
    for label in cat_cols:
        df[label] = le.fit_transform(df[label])

    # Print the head of the DataFrame after encoding
    print(df.head())
    print('---------------------------------------------------------------------')

    # Compute correlation matrix
    df_corr = df.corr()

    # Sort the correlation of 'fuelType' in descending order
    sorted_corr = df_corr["fuelType"].sort_values(ascending=False)

    # Visualize correlation heatmap
    sns.heatmap(df_corr, fmt=".3f", cmap="YlGnBu")
    plt.show()
    print('---------------------------------------------------------------------')

    # Scatter plot for 'price' vs 'engineSize' for fuelType == 0 (Petrol)
    sns.scatterplot(x=df["price"], y=df["engineSize"], hue=df[df["fuelType"] == 0]["fuelType"])
    plt.show()
    print('---------------------------------------------------------------------')

    # Scatter plot for 'price' vs 'engineSize' for fuelType == 2 (Diesel)
    sns.scatterplot(x=df["price"], y=df["engineSize"], hue=df[df["fuelType"] == 2]["fuelType"])
    plt.show()
    print('---------------------------------------------------------------------')

    # Scatter plot for 'price' vs 'year' for fuelType == 0 (Petrol)
    sns.scatterplot(x=df["price"], y=df["year"], hue=df[df["fuelType"] == 0]["fuelType"])
    plt.show()
    print('---------------------------------------------------------------------')

    # Scatter plot for 'price' vs 'year' for fuelType == 2 (Diesel)
    sns.scatterplot(x=df["price"], y=df["year"], hue=df[df["fuelType"] == 2]["fuelType"])
    plt.show()
    print('---------------------------------------------------------------------')

    # Print the columns of the DataFrame except the last one
    print(df.columns[:-1])
    print('---------------------------------------------------------------------')

    return df

def remove_outliers(df):
    # Check outliers
    plt.figure(figsize=(10, 20))
    for i, col in enumerate(df.columns[:-1], 1):
        plt.subplot(3, 3, i)
        skewness = df[col].skew()
        sns.histplot(df[col], kde=True, label="Skew = %.3f" % (skewness))
        plt.title(f"Skewness of {col} Data")
        plt.legend(loc="best")
        plt.tight_layout()
        plt.plot()
        print('---------------------------------------------------------------------')

    for col in df.columns[:-1]:
        print(f"Column : {col}")
        plt.hist(df[col], density=True, bins=30)

        xmin, xmax = plt.xlim()
        x = np.linspace(xmin, xmax, 100)
        p = stats.norm.pdf(x, np.mean(df[col]), np.std(df[col]))
        plt.plot(x, p, 'k', linewidth=2)
        plt.show()
        print('---------------------------------------------------------------------')

        stat, p = shapiro(df[col])
        print("Statistics = %.3f, p = %.3f" % (stat, p))

        alpha = 0.05
        if p > alpha:
            print("Data looks Gaussian Distribution(fail to reject H0) \n")
        else:
            print("Data does not look Gaussian Distribution(reject H0) \n")

    # remove outliers
    for col in df.columns[:-1]:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        df = df[(df[col] >= (Q1 - 1.5 * IQR)) & (df[col] <= (Q3 + 1.5 * IQR))]

    # Check how many outliers are removed
    plt.figure(figsize=(10, 20))
    for i, col in enumerate(df.columns[:-1], 1):
        plt.subplot(3, 3, i)
        skewness = df[col].skew()
        sns.histplot(df[col], kde=True, label="Skew = %.3f" % (skewness), bins=30)
        plt.title(f"Skewness of {col} data outliers removed")
        plt.legend(loc="best")
        plt.tight_layout()
        plt.plot()
        print('---------------------------------------------------------------------')

    return df

# Function to split data into train and test sets
def split_data(df, test_size=0.2, random_state=0):
    X = df.iloc[:, :-1]
    y = df.iloc[:, -1]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    return X_train, X_test, y_train, y_test

def accuracy(X_train, X_test, y_train, y_test):
    reg = LogisticRegression()
    reg.fit(X_train, y_train)
    y_reg = reg.predict(X_test)

    svc = SVC()
    svc.fit(X_train, y_train)
    y_svc = svc.predict(X_test)

    rfc = RandomForestClassifier()
    rfc.fit(X_train, y_train)
    y_rfc = rfc.predict(X_test)

    gbc = GradientBoostingClassifier()
    gbc.fit(X_train, y_train)
    y_gbc = gbc.predict(X_test)

    abc = AdaBoostClassifier()
    abc.fit(X_train, y_train)
    y_abc = abc.predict(X_test)

    knc = KNeighborsClassifier()
    knc.fit(X_train, y_train)
    y_knc = knc.predict(X_test)

    return accuracy_score(y_test, y_reg), accuracy_score(y_test, y_svc), accuracy_score(y_test, y_rfc), accuracy_score(y_test, y_gbc), accuracy_score(y_test, y_abc), accuracy_score(y_test, y_knc)

def model_score(X_train, y_train, X_test, y_test):
    # Check train/test model score of RFC
    train_scores = []
    test_scores = []
    for i in range(1, 10):
        rfc = RandomForestClassifier(n_estimators = i, max_depth = i+1, min_samples_split = i+1)
        rfc.fit(X_train, y_train)

        train_scores.append(rfc.score(X_train, y_train))
        test_scores.append(rfc.score(X_test, y_test))
    sns.lineplot(train_scores, marker = '*', color = 'b')
    sns.lineplot(test_scores, marker = 'o', color = 'r')



#Load the dataset
file_path = "CarsData.csv"
df = load_dataset(file_path)

print('---------------------------------------------------------------------')

df1 = df.copy()
df.drop("fuelType", axis = 1, inplace = True)
df = pd.concat([df, df1["fuelType"]], axis = 1)

print('---------------------------------------------------------------------')

print(df.head())

print('---------------------------------------------------------------------')

# Display dataset information
display_dataset_info(df)

# Display summary statistics
display_summary_statistics(df)

# Display unique values count in each column
display_unique_values_count(df)

# Perform exploratory data analysis and visualizations
exploratory_data_analysis(df)

# Visualize categorical features and perform Label Encoding
df = visualize_categorical_features(df)

# Remove outliers
df = remove_outliers(df)

# Split data into train and test sets
X_train, X_test, y_train, y_test = split_data(df)

scores = pd.DataFrame(columns = ["REG", "SVC", "RFC", "GBC", "ABC", "KNC"],index = ["ACC"])
acc = [reg, svc, rfc, gbc, abc, knc] = accuracy(X_train, X_test, y_train, y_test)

scores.iloc[0, :] = acc
print(scores)

# Check train/test model score of RFC
model_score(X_train, y_train, X_test, y_test)

# Train/Test Model Score of RFC
rfc = RandomForestClassifier(n_estimators = 2, max_depth = 3, min_samples_split = 3)
rfc.fit(X_train, y_train)
print("RFC Train Model Score :", rfc.score(X_train, y_train))
print('---------------------------------------------------------------------')
print("RFC Test Model Score :", rfc.score(X_test, y_test))

joblib.dump(rfc, "random_forest_model.h5")